<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on words about code</title>
    <link>http://rubicks.github.io/post/</link>
    <description>Recent content in Posts on words about code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Feb 2016 15:56:58 -0500</lastBuildDate>
    <atom:link href="http://rubicks.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>hugo</title>
      <link>http://rubicks.github.io/post/hugo/</link>
      <pubDate>Mon, 01 Feb 2016 15:56:58 -0500</pubDate>
      
      <guid>http://rubicks.github.io/post/hugo/</guid>
      <description>&lt;p&gt;You know that feeling you get when you find a new
(tool|library|framework|machine) and start thinking, &amp;ldquo;OMG. This is exactly what
I need to solve this problem I&amp;rsquo;ve been having.&amp;ldquo;? That&amp;rsquo;s the way I felt about
&lt;a href=&#34;https://gohugo.io&#34;&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/a&gt; when I first read about it.&lt;/p&gt;

&lt;p&gt;My old static site generator was &lt;a href=&#34;https://jaspervdj.be/hakyll&#34;&gt;hakyll&lt;/a&gt;. Hakyll is a very nice and
very capable static site generator modelled on &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;jekyll&lt;/a&gt; and implemented
in &lt;a href=&#34;https://www.haskell.org&#34;&gt;&lt;code&gt;haskell&lt;/code&gt;&lt;/a&gt;. My problem with hakyll is one of availability&amp;mdash;my
&lt;a href=&#34;https://travis-ci.org/&#34;&gt;CI service of choice&lt;/a&gt; doesn&amp;rsquo;t have hakyll installed on their default
images.&lt;/p&gt;

&lt;p&gt;Now, I&amp;rsquo;m no stranger to bending remote virtual machines to my will. I can do
the debug-from-a-distance dance as well as anyone. Many months ago, when I was
fresh and new to hakyll, I spent hours reading error logs spat by distant
Travis machines, pawing through dependencies, and &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt;
&lt;code&gt;install&lt;/code&gt;ing package after package. It worked, eventually. I won my battle
against the &lt;code&gt;cabal&lt;/code&gt; and the pipeline&amp;mdash;such as it was&amp;mdash;actually worked. It
was slow as hell (because of &lt;code&gt;cabal&lt;/code&gt;, or &lt;code&gt;haskell&lt;/code&gt;, or the JVM, or
something) but it worked nonetheless.&lt;/p&gt;

&lt;p&gt;Then something changed. Maybe Travis upgraded the image. Maybe the &lt;code&gt;cabal&lt;/code&gt;
grew restless. Maybe &lt;a href=&#34;https://xkcd.com/378&#34;&gt;cosmic rays&lt;/a&gt;. I didn&amp;rsquo;t know and didn&amp;rsquo;t
care. I &lt;em&gt;absolutely did&lt;/em&gt; know that didn&amp;rsquo;t have it in me to fight the
&lt;code&gt;cabal&lt;/code&gt; anew. I went looking for something else, something easier but not
necessarily better.&lt;/p&gt;

&lt;p&gt;Hugo is what I found. Hugo wins in all of the ways hakyll failed me. Hugo is
implemented in &lt;a href=&#34;https://golang.org&#34;&gt;&lt;code&gt;go&lt;/code&gt;&lt;/a&gt;, which makes it (without much hyperbole)
available &lt;em&gt;everywhere&lt;/em&gt; and faster than &lt;em&gt;anything&lt;/em&gt;. Even over my feeble DSL ISP,
I can install hugo and its dependencies in 2 minutes. Even on my underpowered
laptop, I can build my entire site in 63 ms. Sixty-three milliseconds!!! Behold
the power of Go.&lt;/p&gt;

&lt;p&gt;The content authorship workflow is nearly identical to that of Jekyll and
Hakyll. The markup &amp;ldquo;front matter&amp;rdquo; is easy on the brain. Installing and using
themes is dead simple.&lt;/p&gt;

&lt;p&gt;tldr; Hugo wins. Consider it if you&amp;rsquo;re looking for a static site generator.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>maven uberjar</title>
      <link>http://rubicks.github.io/2015/05/24/maven-uberjar/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2015/05/24/maven-uberjar/</guid>
      <description>&lt;p&gt;Maven. Uberjar. If those two words made you cringe just now, then you know my
pain. The &lt;a href=&#34;https://www.google.com/search?q=maven+uberjar&#34;&gt;googles runneth over&lt;/a&gt; with purported fixes and
outright lies. &lt;a href=&#34;http://dig.floatingsun.net/the-elusive-uber-jar/&#34;&gt;One guy&lt;/a&gt; seems to have it figured
out. Teaser: use &lt;a href=&#34;https://maven.apache.org/plugins/maven-shade-plugin/&#34;&gt;the maven shade plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://leiningen.org&#34;&gt;Leiningen&lt;/a&gt; ships with the uberjar target baked in. Just
saying.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>resolv.conf and google nameservers</title>
      <link>http://rubicks.github.io/2015/05/06/resolv-conf-google-nameservers/</link>
      <pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2015/05/06/resolv-conf-google-nameservers/</guid>
      <description>&lt;p&gt;Something broke my laptop&amp;rsquo;s &lt;code&gt;NetworkManager&lt;/code&gt;. At first I wasn&amp;rsquo;t sure what was
happening. The usual reboot trick didn&amp;rsquo;t work. Resetting the network also didn&amp;rsquo;t
work. Once I resigned myself to actually reading the error messages (and
googling them on my phone), it wasn&amp;rsquo;t difficult to trace the problem back to
DNS. Specifically, I had no DNS. This is what my &lt;code&gt;/etc/resolv.conf&lt;/code&gt; looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Generated by NetworkManager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what it &lt;em&gt;used to&lt;/em&gt; look like (&lt;code&gt;/etc/resolv.conf.tmp&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Generated by NetworkManager
nameserver 10.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Residential network troubleshooters will recognize that particular nameserver as
the one running on the overworked little router sitting between you and your
ISP. I don&amp;rsquo;t know why (or how) &lt;a href=&#34;https://wiki.archlinux.org/index.php/NetworkManager&#34;&gt;&lt;code&gt;NetworkManager&lt;/code&gt;&lt;/a&gt; did that to
my &lt;code&gt;/etc/resolv.conf&lt;/code&gt; but I &lt;em&gt;do&lt;/em&gt; know that I didn&amp;rsquo;t care to find out. My first
priority was to restore DNS.&lt;/p&gt;

&lt;p&gt;Did you know google runs nameservers that just anyone use? I did. After I
&lt;a href=&#34;https://wiki.archlinux.org/index.php/Network_configuration&#34;&gt;read about it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, I made my &lt;code&gt;/etc/resolv.conf&lt;/code&gt; look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Generated by NetworkManager
nameserver 8.8.8.8
nameserver 8.8.4.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which fixed literally everything that was wrong with my DNS. Thanks, google.&lt;/p&gt;

&lt;p&gt;Then, I followed a link to &lt;a href=&#34;https://wiki.archlinux.org/index.php/Dnsmasq&#34;&gt;a page about &lt;code&gt;dnsmasq&lt;/code&gt;&lt;/a&gt;, which
got me really excited about setting up my own &lt;code&gt;dnsmasq&lt;/code&gt; local service. Then, I
realized that I have more pressing things to do with my time&amp;mdash;like writing
about my little successes in my blog.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sysadmin tricks</title>
      <link>http://rubicks.github.io/2015/05/06/sysadmin-tricks/</link>
      <pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2015/05/06/sysadmin-tricks/</guid>
      <description>

&lt;h5 id=&#34;find-out-which-process-is-listening-on-some-port:8943b565f56b3ed97c7b12f6692fc6f9&#34;&gt;Find out which process is listening on some port&lt;/h5&gt;

&lt;h6 id=&#34;netstat:8943b565f56b3ed97c7b12f6692fc6f9&#34;&gt;&lt;code&gt;netstat&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ netstat -tlpn | head -n2
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto  Recv-Q  Send-Q  Local Address  Foreign Address  State   PID/Program name

$ netstat -tlpn | egrep &amp;quot;:22\b&amp;quot;
tcp         0       0  0.0.0.0:22     0.0.0.0:*        LISTEN  -
tcp         0       0  :::22          :::*             LISTEN  -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we print the program names (&lt;code&gt;-p&lt;/code&gt;)
of those listening (&lt;code&gt;-l&lt;/code&gt;)
for incoming tcp (&lt;code&gt;-t&lt;/code&gt;) connections
showing numeric (&lt;code&gt;-n&lt;/code&gt;) host addresses instead of attempting to determine symbolic host, port, or user names&lt;/p&gt;

&lt;h6 id=&#34;fuser:8943b565f56b3ed97c7b12f6692fc6f9&#34;&gt;&lt;code&gt;fuser&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;# fuser 631/tcp
631/tcp:     7807
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like PID 7807 opened tcp port 631.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ls -l /proc/7807/exe
lrwxrwxrwx 1 root root 0 May 11 15:06 /proc/7807/exe -&amp;gt; /usr/sbin/cupsd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PID 7807 is the print server&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pipefail</title>
      <link>http://rubicks.github.io/2015/02/19/pipefail/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2015/02/19/pipefail/</guid>
      <description>&lt;p&gt;I learned about &lt;code&gt;pipefail&lt;/code&gt; today. From the &lt;code&gt;bash(1)&lt;/code&gt; man page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pipefail
    If set, the return value of a pipeline is the value
    of the last (rightmost) command to exit with a non-
    zero  status,  or zero if all commands in the pipeline
    exit successfully.  This option is disabled by default.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, it works like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ set -o | grep pipefail
pipefail off
$ false | tee `mktemp`
$ echo $?
0
$ false | tee `mktemp`
$ echo $PIPESTATUS
1
$ set -o pipefail
$ set -o | grep pipefail
pipefail on
$ false | tee `mktemp`
$ echo $?
1
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enabling the &lt;code&gt;pipefail&lt;/code&gt; option forces the &lt;em&gt;entire pipeline&lt;/em&gt; to return failure if
&lt;em&gt;any constituent command&lt;/em&gt; returns failure. Otherwise, only the return status of
the last (rightmost) command is reported&amp;mdash;which may well be success despite
some earlier command reporting failure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>windoze builds</title>
      <link>http://rubicks.github.io/2015/01/21/windoze-builds/</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2015/01/21/windoze-builds/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s get one thing out of the way right now:
&lt;a href=&#34;https://duckduckgo.com/?q=windows+sucks&#34;&gt;Windows sucks&lt;/a&gt;. The reasons are myriad, but I&amp;rsquo;m not going to get
into them. We all know it sucks, just as we all know that Windows users are
legion.&lt;/p&gt;

&lt;p&gt;Most of the time, I don&amp;rsquo;t have to think about that family of operating
systems. That&amp;rsquo;s because, over the course of 16 years, I learned and used various
Linux distros. It was never magical and sometimes painful, but on average, those
distros worked as advertised. Any Linux problem nearly always sprung from my
stupidity, inexperience, and/or naivete. With enough google queries and
reference documentation, a solution (or sane workaround) was possible.&lt;/p&gt;

&lt;p&gt;Windows is different. Windows problems don&amp;rsquo;t yield to the usual
google-the-error-message protocol. Just using Windows is scary. Developing
software for Windows is scarier. Developing cross-platform software that runs on
&lt;a href=&#34;https://en.wikipedia.org/wiki/POSIX&#34;&gt;POSIX&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Windows_API#Win32&#34;&gt;win32&lt;/a&gt;&amp;mdash;that&amp;rsquo;s downright nightmarish.&lt;/p&gt;

&lt;p&gt;In the free software world, the well-trodden path is to develop initially on
Linux (almost always Ubuntu, these days) until the product stabilizes before
trying to cross-compile with &lt;a href=&#34;http://mingw.org/&#34;&gt;mingw&lt;/a&gt;. If this is your first such foray
into supporting multiple target platforms, then this is also your first
introduction to &lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_of_pain&#34;&gt;The Matrix of Pain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To enumerate your matrix of pain, find the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Cartesian_product&#34;&gt;Cartesian product&lt;/a&gt; of every set of all compilers (and
variations of flags thereto) &lt;em&gt;for every platform&lt;/em&gt;. For example, if I wish to
support &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;clang&lt;/code&gt; native compilations and &lt;code&gt;mingw&lt;/code&gt; cross compilation,
then my pain matrix is of size &lt;em&gt;three&lt;/em&gt;. Not so bad, right? It gets so much
worse.&lt;/p&gt;

&lt;p&gt;If I want to support release and debug builds, that necessitates two sets of
flags for each compilier. This doubles the size of the matrix. If I want to
support multiple build platforms, the matrix expands by the equivalent
factor. Within popular open-source projects, it is not uncommon to see build
matrices of dozens of elements.&lt;/p&gt;

&lt;p&gt;That is, in short, what &lt;a href=&#34;https://github.com/Mortis69&#34;&gt;Mortis69&lt;/a&gt; and myself are attempting with
&lt;a href=&#34;https://github.com/Mortis69/rendera&#34;&gt;rendera&lt;/a&gt;. It&amp;rsquo;s not easy. It&amp;rsquo;s very, very hard. It&amp;rsquo;s the reason why we
don&amp;rsquo;t have automated Windows builds yet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rendera resource files</title>
      <link>http://rubicks.github.io/2015/01/17/rendera-resource-files/</link>
      <pubDate>Sat, 17 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2015/01/17/rendera-resource-files/</guid>
      <description>&lt;p&gt;Remember when I was &lt;a href=&#34;2014-12-14-barry.html&#34;&gt;all excited&lt;/a&gt; about &lt;a href=&#34;https://github.com/rubicks/barry&#34;&gt;&lt;code&gt;barry&lt;/code&gt;&lt;/a&gt;?
Remember how I was going to turn all those PNG images into byte-arrays and
compile them directly into the &lt;code&gt;rendera&lt;/code&gt; executable? What ever happened with
that?&lt;/p&gt;

&lt;p&gt;The short story is that it didn&amp;rsquo;t work out that way. The reasons for this
include (but are not limited to) the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/automake/manual/automake.html#Subdirectories&#34;&gt;recursive automake&lt;/a&gt; is &lt;em&gt;really hard&lt;/em&gt; to get right&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/autoconf/manual/autoconf.html#Subdirectories&#34;&gt;recursive autoconf&lt;/a&gt; is &lt;em&gt;even harder&lt;/em&gt; to get right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not to say that such things are impossible. Recall that I managed get
automake subdirectories working when I
&lt;a href=&#34;2015-01-04-autotest.html&#34;&gt;started using autotest&lt;/a&gt;. That little job, however,
was mostly copypasta&amp;mdash;I had some (not many) examples from which to steal.&lt;/p&gt;

&lt;p&gt;Building the &lt;code&gt;barry&lt;/code&gt; executable as a subproject of &lt;a href=&#34;https://github.com/Mortis69/rendera&#34;&gt;&lt;code&gt;rendera&lt;/code&gt;&lt;/a&gt; to then
use the former to generate source code for the latter&amp;mdash;that is what I set out
to do.&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t find a single example implementation&amp;mdash;not &lt;em&gt;one&lt;/em&gt;. After many
faltering attempts, I discovered that such a thing it is actually
possible. Unfortunately, for someone with my meager &lt;a href=&#34;https://www.gnu.org/software/m4/&#34;&gt;m4&lt;/a&gt; skills, the effort
required is completely unjustified.&lt;/p&gt;

&lt;p&gt;So, I did something else.&lt;/p&gt;

&lt;p&gt;It started as a directory path problem; i.e., the directory hierarchy of build
(automake&amp;rsquo;s &lt;code&gt;$(builddir)&lt;/code&gt;) didn&amp;rsquo;t match that of the installation (autoconf&amp;rsquo;s
&lt;code&gt;$(prefix)&lt;/code&gt;). So, if they don&amp;rsquo;t match, we&amp;rsquo;ll just make symlinks until do. How,
exactly? Why, in &lt;code&gt;configure.ac&lt;/code&gt;, of course:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...

AC_PROG_LN_S
AC_PROG_MKDIR_P

...

(
  $MKDIR_P share/rendera &amp;amp;&amp;amp; \
  cd share/rendera       &amp;amp;&amp;amp; \
  $LN_S ../../&amp;quot;${srcdir}&amp;quot;/data
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I should probably change that relative path to its absolute equivalent, but, for
the moment, it&amp;rsquo;s working.&lt;/p&gt;

&lt;p&gt;Update: I deleted the &lt;strong&gt;submod_barry&lt;/strong&gt; branch on my rendera repo, but I did
manage to get a &lt;strong&gt;submod_fltk&lt;/strong&gt; branch working.&lt;/p&gt;

&lt;p&gt;Update: I deleted the &lt;strong&gt;submod_fltk&lt;/strong&gt; branch on my rendera repo. The git
submodule stuff was working. The cross compilation of FLTK was not.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>autotest</title>
      <link>http://rubicks.github.io/2015/01/04/autotest/</link>
      <pubDate>Sun, 04 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2015/01/04/autotest/</guid>
      <description>&lt;p&gt;Did you know that &lt;strong&gt;autotest&lt;/strong&gt; is a thing? No, not
&lt;a href=&#34;https://github.com/autotest/autotest&#34;&gt;&lt;em&gt;that&lt;/em&gt; autotest&lt;/a&gt;,
&lt;a href=&#34;https://www.gnu.org/software/autoconf/manual/autoconf.html#Using-Autotest&#34;&gt;&lt;em&gt;this&lt;/em&gt; autotest&lt;/a&gt;. I sure as hell didn&amp;rsquo;t&amp;mdash;not until about a
week ago. I have no idea what to make of it. On the plus side:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it has no external dependencies&lt;/li&gt;
&lt;li&gt;it comes &amp;ldquo;for free&amp;rdquo; with &lt;a href=&#34;https://www.gnu.org/software/autoconf/&#34;&gt;autoconf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;it isn&amp;rsquo;t horribly complicated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the minus side:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it&amp;rsquo;s still kind of complicated&lt;/li&gt;
&lt;li&gt;it forces you to write unit tests in &lt;a href=&#34;https://www.gnu.org/software/m4/&#34;&gt;m4&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;not many people use it&lt;/li&gt;
&lt;li&gt;the documentation is pretty thin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s not at all like writing &lt;a href=&#34;https://www.gnu.org/software/automake/manual/automake.html#Tests&#34;&gt;unit tests with automake&lt;/a&gt;. Since
autotest is a facility of autoconf, it initializes before automake does. Getting
it to initialize properly depends heavily on setting up some
&lt;a href=&#34;https://www.gnu.org/software/autoconf/manual/autoconf.html#Making-testsuite-Scripts&#34;&gt;weird boilerplate&lt;/a&gt;. You have to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;give autotest its own directory (&lt;code&gt;tests&lt;/code&gt; by convention) within your
project&lt;/li&gt;
&lt;li&gt;populate &lt;code&gt;tests&lt;/code&gt; with

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile.am&lt;/code&gt; defining certain targets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;testsuite.at&lt;/code&gt; implementing your unit tests&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;within &lt;code&gt;configure.ac&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;invoke &lt;code&gt;AC_CONFIG_TESTDIR&lt;/code&gt; on &lt;code&gt;tests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;invoke &lt;code&gt;AC_CONFIG_FILES&lt;/code&gt; on &lt;code&gt;tests/Makefile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;within &lt;code&gt;Makefile.am&lt;/code&gt;, add &lt;code&gt;tests&lt;/code&gt; to your &lt;code&gt;SUBDIRS&lt;/code&gt; variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I consider myself to have barely-better-than-average competence with the
autotools, but getting this set up was moderately difficult for me. The time
investment was a little more than a week, and I can&amp;rsquo;t say for sure if it was
worth it. My m4 skills are almost non-existent&amp;mdash;I don&amp;rsquo;t know if I can maintain
a sane testing methodology with an unfamiliar language. Whatever; I did it, I
learned something, and maybe I&amp;rsquo;ve got something worth keeping.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&#34;https://github.com/rubicks/barry&#34;&gt;my barry project&lt;/a&gt; if you want to see what I did.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>autoconf git describe</title>
      <link>http://rubicks.github.io/2014/12/19/autoconf-git-describe/</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2014/12/19/autoconf-git-describe/</guid>
      <description>&lt;p&gt;You don&amp;rsquo;t know me, &lt;a href=&#34;https://github.com/cpackham&#34;&gt;Chris Packham&lt;/a&gt;, but I owe you a debt of
gratitude. Let me explain&amp;hellip;&lt;/p&gt;

&lt;p&gt;I use autotools. The autotools are &lt;em&gt;The Means&lt;/em&gt; by which one configures (and
builds and distributes) software. Sure, they&amp;rsquo;re weird, but they work.&lt;/p&gt;

&lt;p&gt;I also use git. Git is &lt;em&gt;The Means&lt;/em&gt; by which one versions (and branches and
releases) software. I don&amp;rsquo;t have to apologize for anything with git&amp;mdash;it&amp;rsquo;s
universally awesome and everything else sucks hard.&lt;/p&gt;

&lt;p&gt;Git has the &lt;a href=&#34;https://www.kernel.org/pub/software/scm/git/docs/git-tag.html&#34;&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.kernel.org/pub/software/scm/git/docs/git-describe.html&#34;&gt;&lt;code&gt;describe&lt;/code&gt;&lt;/a&gt;
sub-commands. Provided you have at least one tag on your repository, you can
generate descriptive version names like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rubicks@machine:~/code/barry$ git describe --always --dirty
v0.2.0-1-g87dd6e9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, on the current branch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v0.2.0&lt;/code&gt; is the most recent tag&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; is the quantity of commits since that tag&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt; precedes the 7-character abbreviation (&lt;code&gt;87dd6e9&lt;/code&gt;) for the most
recent commit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With &lt;code&gt;autoconf&lt;/code&gt;, one specifies version information as the second argument to
the &lt;a href=&#34;https://www.gnu.org/software/autoconf/manual/autoconf.html#Initializing-configure&#34;&gt;&lt;code&gt;AC_INIT&lt;/code&gt;&lt;/a&gt; function. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AC_INIT([crapware],[0.1.0])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would initialize autoconf for the &lt;code&gt;crapware&lt;/code&gt; package at version &lt;code&gt;0.1.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I got to thinking there must be a way to keep the autoconf package version in
sync with &lt;code&gt;git describe&lt;/code&gt;. There is, and it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AC_INIT([foobar],
        [m4_esyscmd_s([git describe --always])])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The benefit to doing it this way (as opposed to shell-substitution) is that the
working directory for the command is always the same; namely, the directory that
contains &lt;code&gt;configure.ac&lt;/code&gt;. With shell substitution, the invocation to &lt;code&gt;git
describe&lt;/code&gt; only works as intended when the git repository is discoverable from
the build directory; i.e, in-source builds and/or out-of-source builds when the
git repo is the (eventual) parent.&lt;/p&gt;

&lt;p&gt;Many thanks to Packham for showing this trick on the
&lt;a href=&#34;https://github.com/cpackham/git-patch/blob/master/configure.ac&#34;&gt;&lt;code&gt;configure.ac&lt;/code&gt;&lt;/a&gt; within the &lt;a href=&#34;https://github.com/cpackham/git-patch&#34;&gt;&lt;code&gt;git-patch&lt;/code&gt;&lt;/a&gt;
project. There were &lt;a href=&#34;https://github.com/search?q=git+describe+extension%3Aac&amp;amp;type=Code&#34;&gt;lots of others&lt;/a&gt;, but I found Packham first.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>barry</title>
      <link>http://rubicks.github.io/2014/12/14/barry/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2014/12/14/barry/</guid>
      <description>&lt;p&gt;I made this for you!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rubicks/barry&#34;&gt;https://github.com/rubicks/barry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &amp;ldquo;this&amp;rdquo;, I mean a silly little program, and by &amp;ldquo;you&amp;rdquo;, I mean computer nerds
with too much time on their hands. This is firmly within the
scratch-your-own-itch category of software. Here&amp;rsquo;s how it started&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Mortis69&#34;&gt;Mortis69&lt;/a&gt; has been developing &lt;a href=&#34;https://github.com/Mortis69/rendera&#34;&gt;rendera&lt;/a&gt; for a very long
time. Rendera is a gui application for image manipulation. I saw rendera on the
&lt;a href=&#34;http://sourceforge.net/p/forge/helpwanted/&#34;&gt;sourceforge &amp;ldquo;Help Wanted&amp;rdquo; forums&lt;/a&gt;, and in a fit of
hubris, I decide I could make a contribution. I&amp;rsquo;ve never done anything with gui
applications, but my arrogance more than makes up for my ignorance.&lt;/p&gt;

&lt;p&gt;Like most gui applications, rendera has various little images that need to be
placed on the window. The images need to exist somewhere, so rendera (quite
reasonably) keeps them as PNG files in a certain directory. When the program
starts, various initializers open the files, read them into memory, and paint
them on the screen. It works like gangbusters as long as the files are where the
program expects them to be.&lt;/p&gt;

&lt;p&gt;Mortis69 likes to build in-source, so the built binary (again, reasonably)
assumes a certain path to the needed PNGs &lt;em&gt;relative to rendera project root
directory&lt;/em&gt;. Which is fine. It&amp;rsquo;s better than fine&amp;mdash;it works.&lt;/p&gt;

&lt;p&gt;I like to build out-of-source, so that doesn&amp;rsquo;t work for me. I had a problem. At
the time, I didn&amp;rsquo;t even know what kind of problem it was. &amp;ldquo;What do you call the
files that you need to distribute that aren&amp;rsquo;t source code, test scripts, or
autotoolery.&amp;rdquo; As I found out, you call them &amp;ldquo;resource files&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Resource files are
&lt;a href=&#34;http://stackoverflow.com/questions/9242524/data-files-with-gnus-autoconf-and-automake&#34;&gt;tricky&lt;/a&gt;. &lt;a href=&#34;http://www.gnu.org/prep/standards/standards.html#Directory-Variables&#34;&gt;GNU convention&lt;/a&gt; dictates you
install architecture-independent data files into either of the&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;${PREFIX}/share
${PREFIX}/share/${PROJECT_NAME}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;paths; i.e., the automake-defined &lt;a href=&#34;https://www.gnu.org/software/automake/manual/automake.html#Data&#34;&gt;data directory variables&lt;/a&gt;
&lt;code&gt;$(datadir)&lt;/code&gt; and &lt;code&gt;$(pkgdatadir)&lt;/code&gt;, respectively. That works
great&amp;mdash;&lt;em&gt;after&lt;/em&gt; you install your thing. The situation is more complicated
&lt;em&gt;before&lt;/em&gt; installation, like, for instance, when you run the freshly-built
binary.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sure there&amp;rsquo;s a way to rig autoconf and automake such that you know, at
compile-time, where your resources live. I&amp;rsquo;m sure I&amp;rsquo;ll figure that out
eventually. I probably should have worked on that, but instead I wrote a tool
that turns files into source code.&lt;/p&gt;

&lt;p&gt;Why would I do that? I don&amp;rsquo;t know, really. The whole resource-file thing was
just pissing me off and my impatience got the better of me. Turning binary data
files into byte arrays is cute trick, and it definitely simplifies any
interactions with resources, but it doesn&amp;rsquo;t scale very well. Or at all.&lt;/p&gt;

&lt;p&gt;I should probably go back to the &lt;a href=&#34;https://www.gnu.org/software/automake/manual/automake.html&#34;&gt;automake manual&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gud-gdb</title>
      <link>http://rubicks.github.io/2014/12/13/gud-gdb/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2014/12/13/gud-gdb/</guid>
      <description>&lt;p&gt;Back in the day, emacs users could&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M-x gdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the correct thing would happen. Notably, when the thing being debugged spit
to stdout, emacs didn&amp;rsquo;t spawn some weird &lt;code&gt;*input/output*&lt;/code&gt; buffer. Even
better, it didn&amp;rsquo;t replace your source code listing buffer with the
&lt;code&gt;*input/output*&lt;/code&gt; buffer it just spawned. These days it&amp;rsquo;s more
complicated. You have to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M-x gud-gdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if you want the old behavior; i.e., everything happens right on the gdb prompt
and (most importantly) the source code listing never abruptly disappears.&lt;/p&gt;

&lt;p&gt;Thanks, &lt;a href=&#34;https://stackoverflow.com/questions/13560933/how-to-turn-off-input-output-buffer-in-gud&#34;&gt;stackoverflow&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>flash sound</title>
      <link>http://rubicks.github.io/2014/11/30/flash-sound/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2014/11/30/flash-sound/</guid>
      <description>&lt;p&gt;I had a problem with the sound coming from the flash browser plugin: it
wasn&amp;rsquo;t. Somewhere between youtube and my laptop speakers, the audio was getting
dropped. Luckily, &lt;a href=&#34;https://bbs.archlinux.org/viewtopic.php?pid=1024050#p1024050&#34;&gt;another Arch user&lt;/a&gt; has already
trouble-shot this problem. Here are the steps I followed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pacman -S lib32-alsa-plugins lib32-libcanberra-pulse
$ pkill chromium
$ nohup chromium &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m glad it&amp;rsquo;s fixed&amp;mdash;the silence was really starting to bother me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hakyll</title>
      <link>http://rubicks.github.io/2014/11/22/hakyll/</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2014/11/22/hakyll/</guid>
      <description>&lt;p&gt;Getting &lt;a href=&#34;http://jaspervdj.be/hakyll&#34;&gt;hakyll&lt;/a&gt;, &lt;a href=&#34;https://travis-ci.com/&#34;&gt;travis-ci&lt;/a&gt;, and
&lt;a href=&#34;https://pages.github.com/&#34;&gt;github-pages&lt;/a&gt; to work together isn&amp;rsquo;t difficult, but not trivial,
either.&lt;/p&gt;

&lt;p&gt;When using hakyll, the working process is simple enough:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ emacs -nw ./stuff.md    # hack on templates and markdown files
$ ghc --make site.hs      # create ./site executable
$ ./site build            # create site artifacts in ./_site/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Github likes &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;jekyll&lt;/a&gt;&amp;mdash;so much so that jekyll enjoys native support on
github-pages. Insofar as I&amp;rsquo;m aware, jekyll is the only static site generator
that github-pages supports. Users of other static site generators (e.g., hakyll
and &lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;pelican&lt;/a&gt;) must do things the hard way. For hakyll users, this
means getting the contents of &lt;code&gt;./_site/&lt;/code&gt; into your github-pages repo.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s automate it.&lt;/p&gt;

&lt;p&gt;One pelican user, Kevin Yap, managed to do
&lt;a href=&#34;http://kevinyap.ca/2014/06/deploying-pelican-sites-using-travis-ci/&#34;&gt;something similar&lt;/a&gt; with his
site. &lt;a href=&#34;https://github.com/iKevinY/iKevinY.github.io/blob/src/deploy.sh&#34;&gt;His deploy script&lt;/a&gt; borrows from
&lt;a href=&#34;http://zonca.github.io/2013/09/automatically-build-pelican-and-publish-to-github-pages.html&#34;&gt;earlier work&lt;/a&gt; by Andrea Zonca, another pelican user. I adapted
Yap&amp;rsquo;s deploy script to make &lt;a href=&#34;https://github.com/rubicks/rubicks-blog/blob/master/deploy.sh&#34;&gt;my own&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sox</title>
      <link>http://rubicks.github.io/2014/05/06/sox/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2014/05/06/sox/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a recipe for faster, bassier listening:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sox -V -S Alex\ Clare\ -\ Too\ Close.ogg -d --norm tempo 1.2 bass +10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sox&lt;/code&gt; is the best at what it does&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-V&lt;/code&gt; bumps verbosity from 2 (default) to 3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-S&lt;/code&gt; displays progress while processing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; directs output to the default audio device&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--norm&lt;/code&gt; auto-adjusts the pregain (down) to prevent clipping&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tempo 1.2&lt;/code&gt; makes it 20% faster&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bass +10&lt;/code&gt; does exactly what you think it does&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pretty sweet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>xmodmap</title>
      <link>http://rubicks.github.io/2014/04/16/xmodmap/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rubicks.github.io/2014/04/16/xmodmap/</guid>
      <description>&lt;p&gt;I can&amp;rsquo;t clain I&amp;rsquo;ve been running the Ubuntu distro since the dim dark ages, but I
have used every release since 6.06 &amp;ldquo;Dapper Drake&amp;rdquo;. Successive upgrades have
taught me two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;backup before the upgrade&lt;/li&gt;
&lt;li&gt;fix the X configuration files after the upgrade&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first is just good sense. The last is probably a symptom of my slightly
uncommon setup. Indeed, I run the &lt;a href=&#34;http://www.nongnu.org/ratpoison&#34;&gt;ratpoison&lt;/a&gt; window manager and
nearly all of my daily workflow happens in xterm and emacs. I&amp;rsquo;ve run this way
for the past four years or so.&lt;/p&gt;

&lt;p&gt;In that time, every Ubuntu upgrade has consistently broken something about my
setup. Nearly always, it&amp;rsquo;s my right Alt (Meta, whatever) key behavior. &lt;code&gt;xev&lt;/code&gt;
says my right alt key is &lt;code&gt;ISO_Level3_Shift&lt;/code&gt;. This makes for a nice surprise in
emacs when right-alt-x does NOT give me the &lt;code&gt;M-x&lt;/code&gt; I need. The most recent fix
involved &lt;a href=&#34;https://wiki.archlinux.org/index.php/Xmodmap&#34;&gt;xmodmap&lt;/a&gt; and its &lt;code&gt;~/.Xmodmap&lt;/code&gt;:&lt;/p&gt;


clear Mod1
keycode 108 = Alt_R NoSymbol Alt_R
add Mod1 = Alt_L Alt_R


&lt;p&gt;Since I already had&lt;/p&gt;


exec xmodmap .Xmodmap


&lt;p&gt;in my &lt;code&gt;~/.ratpoisonrc&lt;/code&gt;, I thought I was good. I wasn&amp;rsquo;t. Somehow, the execution
of xmodmap was failing silently on login. I was just about to give up hope when
I found &lt;a href=&#34;http://askubuntu.com/questions/361128/why-did-13-10-break-my-custom-keyboard-layout&#34;&gt;a similarly afflicted user&lt;/a&gt;. Apparently, X is recompiling and
reusing keyboard layouts.&lt;/p&gt;

&lt;p&gt;As if that wasn&amp;rsquo;t enough, control-(left|right) was broken in xterm; it wasn&amp;rsquo;t
skipping words like it should. Copying &lt;code&gt;/etc/inputrc&lt;/code&gt; to &lt;code&gt;~/.inputrc&lt;/code&gt; fixed it,
but I have no idea why.&lt;/p&gt;

&lt;p&gt;Not cool, Ubuntu. One of these days I&amp;rsquo;ll have to jump ship to &lt;a href=&#34;https://archlinux.org/&#34;&gt;Arch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>